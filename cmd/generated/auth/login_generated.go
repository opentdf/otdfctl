// Code generated by adder. DO NOT EDIT.

package auth

import (
	
	"github.com/spf13/cobra"
)

// LoginRequestFlags represents the flags for the login command
type LoginRequestFlags struct {
	ClientId string `json:"clientId"` // A clientId for use in auth code flow (default = platform well-known public_client_id)
}

// LoginRequest represents the parameters for the login command
type LoginRequest struct {
	Flags LoginRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// LoginHandler defines the function type for handling login commands
type LoginHandler func(cmd *cobra.Command, req *LoginRequest) error

// NewLoginCommand creates a new login command with the provided handler function
func NewLoginCommand(handler LoginHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "login",
		Short:   "Open a browser and login",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runLogin(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("client-id", "i", "", "A clientId for use in auth code flow (default = platform well-known public_client_id)")
	cmd.MarkFlagRequired("client-id")

	return cmd
}

// runLogin handles argument and flag extraction
func runLogin(cmd *cobra.Command, args []string, handler LoginHandler) error {
	clientId, _ := cmd.Flags().GetString("client-id")

	// Create request
	req := &LoginRequest{
		Flags: LoginRequestFlags{
			ClientId: clientId,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
