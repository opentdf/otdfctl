// Code generated by adder. DO NOT EDIT.

package auth

import (
	
	"github.com/spf13/cobra"
)

// PrintAccessTokenRequestFlags represents the flags for the print-access-token command
type PrintAccessTokenRequestFlags struct {
	Json string `json:"json"` // Print the full token in JSON format
}

// PrintAccessTokenRequest represents the parameters for the print-access-token command
type PrintAccessTokenRequest struct {
	Flags PrintAccessTokenRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// PrintAccessTokenHandler defines the function type for handling print-access-token commands
type PrintAccessTokenHandler func(cmd *cobra.Command, req *PrintAccessTokenRequest) error

// NewPrintAccessTokenCommand creates a new print-access-token command with the provided handler function
func NewPrintAccessTokenCommand(handler PrintAccessTokenHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "print-access-token",
		Short:   "Print the cached OIDC access token (if found)",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runPrintAccessToken(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("json", "%!s(bool=false)", "Print the full token in JSON format")

	return cmd
}

// runPrintAccessToken handles argument and flag extraction
func runPrintAccessToken(cmd *cobra.Command, args []string, handler PrintAccessTokenHandler) error {
	json, _ := cmd.Flags().GetString("json")

	// Create request
	req := &PrintAccessTokenRequest{
		Flags: PrintAccessTokenRequestFlags{
			Json: json,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
