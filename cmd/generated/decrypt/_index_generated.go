// Code generated by adder. DO NOT EDIT.

package decrypt

import (
	"fmt"
	
	"github.com/spf13/cobra"
)

// DecryptRequestFlags represents the flags for the decrypt [file] command
type DecryptRequestFlags struct {
	Out string `json:"out"` // The file destination for decrypted content to be written instead of stdout.
	TdfType string `json:"tdfType"` // Deprecated. TDF type is now auto-detected.
	NoVerifyAssertions string `json:"noVerifyAssertions"` // disable verification of assertions
	SessionKeyAlgorithm string `json:"sessionKeyAlgorithm" validate:"oneof=rsa:2048 ec:secp256r1 ec:secp384r1 ec:secp521r1"` // EXPERIMENTAL: The type of session key algorithm to use for decryption

	WithAssertionVerificationKeys string `json:"withAssertionVerificationKeys"` // EXPERIMENTAL: path to JSON file of keys to verify signed assertions. See examples for more information.

	KasAllowlist string `json:"kasAllowlist"` // A custom allowlist of comma-separated KAS Urls, e.g. `https://example.com/kas,http://localhost:8080`. If none specified, the platform will use the list of KASes in the KAS registry. To ignore the allowlist, use a quoted wildcard e.g. `--kas-allowlist '*'` **WARNING:** Bypassing the allowlist may expose you to potential security risks, as untrusted KAS URLs could be used.
}

// DecryptRequest represents the parameters for the decrypt [file] command
type DecryptRequest struct {
	Flags DecryptRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// DecryptHandler defines the function type for handling decrypt [file] commands
type DecryptHandler func(cmd *cobra.Command, req *DecryptRequest) error

// NewDecryptCommand creates a new decrypt [file] command with the provided handler function
func NewDecryptCommand(handler DecryptHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "decrypt",
		Short:   "Decrypt a TDF file",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runDecrypt(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("out", "o", "", "The file destination for decrypted content to be written instead of stdout.")
	cmd.Flags().StringP("tdf-type", "t", "", "Deprecated. TDF type is now auto-detected.")
	cmd.Flags().String("no-verify-assertions", "%!s(bool=false)", "disable verification of assertions")
	cmd.Flags().String("session-key-algorithm", "rsa:2048", "EXPERIMENTAL: The type of session key algorithm to use for decryption
")
	cmd.Flags().String("with-assertion-verification-keys", "", "EXPERIMENTAL: path to JSON file of keys to verify signed assertions. See examples for more information.
")
	cmd.Flags().String("kas-allowlist", "", "A custom allowlist of comma-separated KAS Urls, e.g. `https://example.com/kas,http://localhost:8080`. If none specified, the platform will use the list of KASes in the KAS registry. To ignore the allowlist, use a quoted wildcard e.g. `--kas-allowlist '*'` **WARNING:** Bypassing the allowlist may expose you to potential security risks, as untrusted KAS URLs could be used.")

	return cmd
}

// runDecrypt handles argument and flag extraction
func runDecrypt(cmd *cobra.Command, args []string, handler DecryptHandler) error {
	out, _ := cmd.Flags().GetString("out")
	tdfType, _ := cmd.Flags().GetString("tdf-type")
	noVerifyAssertions, _ := cmd.Flags().GetString("no-verify-assertions")
	sessionKeyAlgorithm, _ := cmd.Flags().GetString("session-key-algorithm")
	withAssertionVerificationKeys, _ := cmd.Flags().GetString("with-assertion-verification-keys")
	kasAllowlist, _ := cmd.Flags().GetString("kas-allowlist")
	// Validate enum for session-key-algorithm
	sessionKeyAlgorithmValid := false
	for _, validValue := range []string{"rsa:2048", "ec:secp256r1", "ec:secp384r1", "ec:secp521r1"} {
		if sessionKeyAlgorithm == validValue {
			sessionKeyAlgorithmValid = true
			break
		}
	}
	if !sessionKeyAlgorithmValid {
		return fmt.Errorf("invalid session-key-algorithm: %s (must be rsa:2048, ec:secp256r1, ec:secp384r1, or ec:secp521r1)", sessionKeyAlgorithm)
	}

	// Create request
	req := &DecryptRequest{
		Flags: DecryptRequestFlags{
			Out: out,
			TdfType: tdfType,
			NoVerifyAssertions: noVerifyAssertions,
			SessionKeyAlgorithm: sessionKeyAlgorithm,
			WithAssertionVerificationKeys: withAssertionVerificationKeys,
			KasAllowlist: kasAllowlist,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
