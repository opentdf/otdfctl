// Code generated by adder. DO NOT EDIT.

package inspect

import (
	
	"github.com/spf13/cobra"
)

// InspectRequestArguments represents the arguments for the inspect command
type InspectRequestArguments struct {
	File string `json:"file" validate:"required"` // Path to the TDF file to inspect
}

// InspectRequest represents the parameters for the inspect command
type InspectRequest struct {
	Arguments InspectRequestArguments `json:"arguments"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// InspectHandler defines the function type for handling inspect commands
type InspectHandler func(cmd *cobra.Command, req *InspectRequest) error

// NewInspectCommand creates a new inspect command with the provided handler function
func NewInspectCommand(handler InspectHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "inspect [file]",
		Short:   "Inspect a TDF file",
		Args: cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			return runInspect(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags

	return cmd
}

// runInspect handles argument and flag extraction
func runInspect(cmd *cobra.Command, args []string, handler InspectHandler) error {
	file := args[0]

	// Create request
	req := &InspectRequest{
		Arguments: InspectRequestArguments{
			File: file,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
