// Code generated by adder. DO NOT EDIT.

package generated

import (
	"fmt"
	
	"github.com/spf13/cobra"
)

// OtdfctlRequestFlags represents the flags for the otdfctl command
type OtdfctlRequestFlags struct {
	Version bool `json:"version"` // show version
}
// OtdfctlRequestPersistentFlags represents the persistent flags for the otdfctl command
type OtdfctlRequestPersistentFlags struct {
	Profile string `json:"profile"` // profile to use for interacting with the platform
	Host string `json:"host"` // Hostname of the platform (i.e. https://localhost)
	TlsNoVerify bool `json:"tlsNoVerify"` // disable verification of the server's TLS certificate
	LogLevel string `json:"logLevel" validate:"oneof=debug info warn error fatal panic"` // log level
	WithAccessToken string `json:"withAccessToken"` // access token for authentication via bearer token
	WithClientCredsFile string `json:"withClientCredsFile"` // path to a JSON file containing a 'clientId' and 'clientSecret' for auth via client-credentials flow
	WithClientCreds string `json:"withClientCreds"` // JSON string containing a 'clientId' and 'clientSecret' for auth via client-credentials flow
	Json bool `json:"json"` // output in JSON format
	Debug bool `json:"debug"` // enable debug output
}

// OtdfctlRequest represents the parameters for the otdfctl command
type OtdfctlRequest struct {
	Flags OtdfctlRequestFlags `json:"flags"`
	PersistentFlags OtdfctlRequestPersistentFlags `json:"persistent_flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// OtdfctlHandler defines the function type for handling otdfctl commands
type OtdfctlHandler func(cmd *cobra.Command, req *OtdfctlRequest) error

// NewOtdfctlCommand creates a new otdfctl command with the provided handler function
func NewOtdfctlCommand(handler OtdfctlHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "otdfctl",
		Short:   "otdfctl - OpenTDF Control Tool",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runOtdfctl(cmd, args, handler)
		},
	}

	// Register persistent flags
	cmd.PersistentFlags().String("profile", "", "profile to use for interacting with the platform")
	cmd.PersistentFlags().String("host", "", "Hostname of the platform (i.e. https://localhost)")
	cmd.PersistentFlags().Bool("tls-no-verify", false, "disable verification of the server's TLS certificate")
	cmd.PersistentFlags().String("log-level", "info", "log level")
	cmd.PersistentFlags().String("with-access-token", "", "access token for authentication via bearer token")
	cmd.PersistentFlags().String("with-client-creds-file", "", "path to a JSON file containing a 'clientId' and 'clientSecret' for auth via client-credentials flow")
	cmd.PersistentFlags().String("with-client-creds", "", "JSON string containing a 'clientId' and 'clientSecret' for auth via client-credentials flow")
	cmd.PersistentFlags().Bool("json", false, "output in JSON format")
	cmd.PersistentFlags().Bool("debug", false, "enable debug output")

	// Register flags
	cmd.Flags().Bool("version", false, "show version")

	return cmd
}

// runOtdfctl handles argument and flag extraction
func runOtdfctl(cmd *cobra.Command, args []string, handler OtdfctlHandler) error {
	version, _ := cmd.Flags().GetBool("version")
	profile, _ := cmd.PersistentFlags().GetString("profile")
	host, _ := cmd.PersistentFlags().GetString("host")
	tlsNoVerify, _ := cmd.PersistentFlags().GetBool("tls-no-verify")
	logLevel, _ := cmd.PersistentFlags().GetString("log-level")
	withAccessToken, _ := cmd.PersistentFlags().GetString("with-access-token")
	withClientCredsFile, _ := cmd.PersistentFlags().GetString("with-client-creds-file")
	withClientCreds, _ := cmd.PersistentFlags().GetString("with-client-creds")
	json, _ := cmd.PersistentFlags().GetBool("json")
	debug, _ := cmd.PersistentFlags().GetBool("debug")
	// Validate enum for log-level
	logLevelValid := false
	for _, validValue := range []string{"debug", "info", "warn", "error", "fatal", "panic"} {
		if logLevel == validValue {
			logLevelValid = true
			break
		}
	}
	if !logLevelValid {
		return fmt.Errorf("invalid log-level: %s (must be debug, info, warn, error, fatal, or panic)", logLevel)
	}

	// Create request
	req := &OtdfctlRequest{
		Flags: OtdfctlRequestFlags{
			Version: version,
		},
		PersistentFlags: OtdfctlRequestPersistentFlags{
			Profile: profile,
			Host: host,
			TlsNoVerify: tlsNoVerify,
			LogLevel: logLevel,
			WithAccessToken: withAccessToken,
			WithClientCredsFile: withClientCredsFile,
			WithClientCreds: withClientCreds,
			Json: json,
			Debug: debug,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
