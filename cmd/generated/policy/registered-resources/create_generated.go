// Code generated by adder. DO NOT EDIT.

package policy_registered_resources

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	Name string `json:"name"` // Name of the registered resource (must be unique within Policy)
	Value string `json:"value"` // Value of the registered resource (i.e. 'value1', must be unique within the Registered Resource)
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"c", "add", "new"},
		Short:   "Create a Registered Resource",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("name", "", "Name of the registered resource (must be unique within Policy)")
	cmd.MarkFlagRequired("name")
	cmd.Flags().StringP("value", "v", "", "Value of the registered resource (i.e. 'value1', must be unique within the Registered Resource)")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	name, _ := cmd.Flags().GetString("name")
	value, _ := cmd.Flags().GetString("value")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			Name: name,
			Value: value,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
