// Code generated by adder. DO NOT EDIT.

package policy_registered_resources_values

import (
	
	"github.com/spf13/cobra"
)

// ListRequestFlags represents the flags for the list command
type ListRequestFlags struct {
	Resource string `json:"resource"` // Identifier of the associated registered resource (ID or name)
	Limit string `json:"limit"` // Limit retrieved count
	Offset string `json:"offset"` // Offset (page) quantity from start of the list
}

// ListRequest represents the parameters for the list command
type ListRequest struct {
	Flags ListRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// ListHandler defines the function type for handling list commands
type ListHandler func(cmd *cobra.Command, req *ListRequest) error

// NewListCommand creates a new list command with the provided handler function
func NewListCommand(handler ListHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"l"},
		Short:   "List Registered Resource Values",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runList(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("resource", "r", "", "Identifier of the associated registered resource (ID or name)")
	cmd.Flags().StringP("limit", "l", "", "Limit retrieved count")
	cmd.Flags().StringP("offset", "o", "", "Offset (page) quantity from start of the list")

	return cmd
}

// runList handles argument and flag extraction
func runList(cmd *cobra.Command, args []string, handler ListHandler) error {
	resource, _ := cmd.Flags().GetString("resource")
	limit, _ := cmd.Flags().GetString("limit")
	offset, _ := cmd.Flags().GetString("offset")

	// Create request
	req := &ListRequest{
		Flags: ListRequestFlags{
			Resource: resource,
			Limit: limit,
			Offset: offset,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
