// Code generated by adder. DO NOT EDIT.

package policy_registered_resources_values

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	Resource string `json:"resource"` // Identifier of the associated registered resource (ID or name)
	Value string `json:"value"` // Value of the registered resource (i.e. 'value1', must be unique within the Registered Resource)
	ActionAttributeValue string `json:"actionAttributeValue"` // Optional action attribute values in the format: \"<action_id | action_name>;<attribute_value_id | attribute_value_fqn>\"
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"c", "add", "new"},
		Short:   "Create Registered Resource Value",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("resource", "r", "", "Identifier of the associated registered resource (ID or name)")
	cmd.MarkFlagRequired("resource")
	cmd.Flags().StringP("value", "v", "", "Value of the registered resource (i.e. 'value1', must be unique within the Registered Resource)")
	cmd.MarkFlagRequired("value")
	cmd.Flags().StringP("action-attribute-value", "a", "", "Optional action attribute values in the format: \"<action_id | action_name>;<attribute_value_id | attribute_value_fqn>\"")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	resource, _ := cmd.Flags().GetString("resource")
	value, _ := cmd.Flags().GetString("value")
	actionAttributeValue, _ := cmd.Flags().GetString("action-attribute-value")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			Resource: resource,
			Value: value,
			ActionAttributeValue: actionAttributeValue,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
