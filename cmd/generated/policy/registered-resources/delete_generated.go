// Code generated by adder. DO NOT EDIT.

package policy_registered_resources

import (
	
	"github.com/spf13/cobra"
)

// DeleteRequestFlags represents the flags for the delete command
type DeleteRequestFlags struct {
	Id string `json:"id"` // ID of the registered resource
	Force string `json:"force"` // Force deletion without interactive confirmation
}

// DeleteRequest represents the parameters for the delete command
type DeleteRequest struct {
	Flags DeleteRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// DeleteHandler defines the function type for handling delete commands
type DeleteHandler func(cmd *cobra.Command, req *DeleteRequest) error

// NewDeleteCommand creates a new delete command with the provided handler function
func NewDeleteCommand(handler DeleteHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "delete",
		Short:   "Delete a Registered Resource",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runDelete(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("id", "i", "", "ID of the registered resource")
	cmd.MarkFlagRequired("id")
	cmd.Flags().String("force", "", "Force deletion without interactive confirmation")

	return cmd
}

// runDelete handles argument and flag extraction
func runDelete(cmd *cobra.Command, args []string, handler DeleteHandler) error {
	id, _ := cmd.Flags().GetString("id")
	force, _ := cmd.Flags().GetString("force")

	// Create request
	req := &DeleteRequest{
		Flags: DeleteRequestFlags{
			Id: id,
			Force: force,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
