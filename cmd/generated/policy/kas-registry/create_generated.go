// Code generated by adder. DO NOT EDIT.

package policy_kas_registry

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	Uri string `json:"uri"` // URI of the Key Access Server
	PublicKeys string `json:"publicKeys"` // One or more public keys saved for the KAS
	PublicKeyRemote string `json:"publicKeyRemote"` // Remote URI where the public key can be retrieved for the KAS
	Name string `json:"name"` // Optional name of the registered KAS (must be unique within Policy)
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"c", "add", "new"},
		Short:   "Create a Key Access Server registration",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("uri", "u", "", "URI of the Key Access Server")
	cmd.MarkFlagRequired("uri")
	cmd.Flags().StringP("public-keys", "c", "", "One or more public keys saved for the KAS")
	cmd.Flags().StringP("public-key-remote", "r", "", "Remote URI where the public key can be retrieved for the KAS")
	cmd.Flags().String("name", "", "Optional name of the registered KAS (must be unique within Policy)")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	uri, _ := cmd.Flags().GetString("uri")
	publicKeys, _ := cmd.Flags().GetString("public-keys")
	publicKeyRemote, _ := cmd.Flags().GetString("public-key-remote")
	name, _ := cmd.Flags().GetString("name")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			Uri: uri,
			PublicKeys: publicKeys,
			PublicKeyRemote: publicKeyRemote,
			Name: name,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
