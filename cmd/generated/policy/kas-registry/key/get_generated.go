// Code generated by adder. DO NOT EDIT.

package policy_kas_registry_key

import (
	
	"github.com/spf13/cobra"
)

// GetRequestFlags represents the flags for the get command
type GetRequestFlags struct {
	Key string `json:"key"` // The KeyID (human-readable identifier) or the internal UUID of the key to retrieve from the specified KAS. The system will attempt to resolve the provided value as either a UUID or a KeyID.
	Kas string `json:"kas"` // Specify the Key Access Server (KAS) where the key (identified by `--key`) is registered. The KAS can be identified by its ID, URI, or Name.
}

// GetRequest represents the parameters for the get command
type GetRequest struct {
	Flags GetRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// GetHandler defines the function type for handling get commands
type GetHandler func(cmd *cobra.Command, req *GetRequest) error

// NewGetCommand creates a new get command with the provided handler function
func NewGetCommand(handler GetHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "get",
		Aliases: []string{"g"},
		Short:   "Get Key",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runGet(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("key", "k", "", "The KeyID (human-readable identifier) or the internal UUID of the key to retrieve from the specified KAS. The system will attempt to resolve the provided value as either a UUID or a KeyID.")
	cmd.MarkFlagRequired("key")
	cmd.Flags().String("kas", "", "Specify the Key Access Server (KAS) where the key (identified by `--key`) is registered. The KAS can be identified by its ID, URI, or Name.")
	cmd.MarkFlagRequired("kas")

	return cmd
}

// runGet handles argument and flag extraction
func runGet(cmd *cobra.Command, args []string, handler GetHandler) error {
	key, _ := cmd.Flags().GetString("key")
	kas, _ := cmd.Flags().GetString("kas")

	// Create request
	req := &GetRequest{
		Flags: GetRequestFlags{
			Key: key,
			Kas: kas,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
