// Code generated by adder. DO NOT EDIT.

package policy_kas_registry_key

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	KeyId string `json:"keyId"` // A unique, often human-readable, identifier for the new key to be created.
	Algorithm string `json:"algorithm"` // Algorithm for the new key (see table below for options).
	Mode string `json:"mode"` // Describes how the private key is managed (see table below for options).
	Kas string `json:"kas"` // Specify the Key Access Server (KAS) where the new key will be created. The KAS can be identified by its ID, URI, or Name.
	WrappingKeyId string `json:"wrappingKeyId"` // Identifier related to the wrapping key. Its meaning depends on the `mode`. For `local` mode, it's a descriptive ID for the `wrappingKey` you provide. For `provider` or `remote` mode, it's the ID of the key within the external provider/system used for wrapping.
	WrappingKey string `json:"wrappingKey"` // The symmetric key material (AES cipher, hex encoded) used to wrap the generated private key. Primarily used when `mode` is `local`.
	PrivateKeyPem string `json:"privateKeyPem"` // The private key PEM (encrypted by an AES 32-byte key, then base64 encoded). Used when importing an existing key pair, typically with `provider` mode.
	ProviderConfigId string `json:"providerConfigId"` // Configuration ID for the key provider. Often required when `mode` is `provider` or `remote` and an external key provider is used.
	PublicKeyPem string `json:"publicKeyPem"` // The base64 encoded public key PEM. Required for `remote` and `public_key` modes, and can be used with `provider` mode if importing an existing key pair.
	Label string `json:"label"` // Comma-separated key=value pairs for metadata labels to associate with the new key (e.g., \"owner=team-a,env=production\").
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"c"},
		Short:   "Create Key",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("key-id", "", "A unique, often human-readable, identifier for the new key to be created.")
	cmd.MarkFlagRequired("key-id")
	cmd.Flags().StringP("algorithm", "a", "", "Algorithm for the new key (see table below for options).")
	cmd.MarkFlagRequired("algorithm")
	cmd.Flags().StringP("mode", "m", "", "Describes how the private key is managed (see table below for options).")
	cmd.MarkFlagRequired("mode")
	cmd.Flags().String("kas", "", "Specify the Key Access Server (KAS) where the new key will be created. The KAS can be identified by its ID, URI, or Name.")
	cmd.MarkFlagRequired("kas")
	cmd.Flags().String("wrapping-key-id", "", "Identifier related to the wrapping key. Its meaning depends on the `mode`. For `local` mode, it's a descriptive ID for the `wrappingKey` you provide. For `provider` or `remote` mode, it's the ID of the key within the external provider/system used for wrapping.")
	cmd.Flags().StringP("wrapping-key", "w", "", "The symmetric key material (AES cipher, hex encoded) used to wrap the generated private key. Primarily used when `mode` is `local`.")
	cmd.Flags().String("private-key-pem", "", "The private key PEM (encrypted by an AES 32-byte key, then base64 encoded). Used when importing an existing key pair, typically with `provider` mode.")
	cmd.Flags().StringP("provider-config-id", "p", "", "Configuration ID for the key provider. Often required when `mode` is `provider` or `remote` and an external key provider is used.")
	cmd.Flags().StringP("public-key-pem", "e", "", "The base64 encoded public key PEM. Required for `remote` and `public_key` modes, and can be used with `provider` mode if importing an existing key pair.")
	cmd.Flags().StringP("label", "l", "", "Comma-separated key=value pairs for metadata labels to associate with the new key (e.g., \"owner=team-a,env=production\").")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	keyId, _ := cmd.Flags().GetString("key-id")
	algorithm, _ := cmd.Flags().GetString("algorithm")
	mode, _ := cmd.Flags().GetString("mode")
	kas, _ := cmd.Flags().GetString("kas")
	wrappingKeyId, _ := cmd.Flags().GetString("wrapping-key-id")
	wrappingKey, _ := cmd.Flags().GetString("wrapping-key")
	privateKeyPem, _ := cmd.Flags().GetString("private-key-pem")
	providerConfigId, _ := cmd.Flags().GetString("provider-config-id")
	publicKeyPem, _ := cmd.Flags().GetString("public-key-pem")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			KeyId: keyId,
			Algorithm: algorithm,
			Mode: mode,
			Kas: kas,
			WrappingKeyId: wrappingKeyId,
			WrappingKey: wrappingKey,
			PrivateKeyPem: privateKeyPem,
			ProviderConfigId: providerConfigId,
			PublicKeyPem: publicKeyPem,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
