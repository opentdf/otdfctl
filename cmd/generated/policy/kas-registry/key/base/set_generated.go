// Code generated by adder. DO NOT EDIT.

package policy_kas_registry_key_base

import (
	
	"github.com/spf13/cobra"
)

// SetRequestFlags represents the flags for the set command
type SetRequestFlags struct {
	Key string `json:"key"` // The KeyID (human-readable identifier) or the internal UUID of an existing key within the specified KAS. This key will be designated as the platform base key. The system will attempt to resolve the provided value as either a UUID or a KeyID.
	Kas string `json:"kas"` // Specify the Key Access Server (KAS) where the key (identified by `--key`) is registered. The KAS can be identified by its ID, URI, or Name.
}

// SetRequest represents the parameters for the set command
type SetRequest struct {
	Flags SetRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// SetHandler defines the function type for handling set commands
type SetHandler func(cmd *cobra.Command, req *SetRequest) error

// NewSetCommand creates a new set command with the provided handler function
func NewSetCommand(handler SetHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "set",
		Aliases: []string{"s"},
		Short:   "Set Base Key",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runSet(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("key", "k", "", "The KeyID (human-readable identifier) or the internal UUID of an existing key within the specified KAS. This key will be designated as the platform base key. The system will attempt to resolve the provided value as either a UUID or a KeyID.")
	cmd.MarkFlagRequired("key")
	cmd.Flags().String("kas", "", "Specify the Key Access Server (KAS) where the key (identified by `--key`) is registered. The KAS can be identified by its ID, URI, or Name.")

	return cmd
}

// runSet handles argument and flag extraction
func runSet(cmd *cobra.Command, args []string, handler SetHandler) error {
	key, _ := cmd.Flags().GetString("key")
	kas, _ := cmd.Flags().GetString("kas")

	// Create request
	req := &SetRequest{
		Flags: SetRequestFlags{
			Key: key,
			Kas: kas,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
