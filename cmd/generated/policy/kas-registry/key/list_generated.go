// Code generated by adder. DO NOT EDIT.

package policy_kas_registry_key

import (
	
	"github.com/spf13/cobra"
)

// ListRequestFlags represents the flags for the list command
type ListRequestFlags struct {
	Limit string `json:"limit"` // Maximum number of keys to return
	Offset string `json:"offset"` // Number of keys to skip before starting to return results
	Algorithm string `json:"algorithm"` // Key Algorithm to filter for
	Kas string `json:"kas"` // Specify the Key Access Server (KAS) where the key (identified by `--key`) is registered. The KAS can be identified by its ID, URI, or Name.
}

// ListRequest represents the parameters for the list command
type ListRequest struct {
	Flags ListRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// ListHandler defines the function type for handling list commands
type ListHandler func(cmd *cobra.Command, req *ListRequest) error

// NewListCommand creates a new list command with the provided handler function
func NewListCommand(handler ListHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"l"},
		Short:   "List Keys",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runList(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("limit", "l", "", "Maximum number of keys to return")
	cmd.MarkFlagRequired("limit")
	cmd.Flags().StringP("offset", "o", "", "Number of keys to skip before starting to return results")
	cmd.MarkFlagRequired("offset")
	cmd.Flags().StringP("algorithm", "a", "", "Key Algorithm to filter for")
	cmd.Flags().String("kas", "", "Specify the Key Access Server (KAS) where the key (identified by `--key`) is registered. The KAS can be identified by its ID, URI, or Name.")
	cmd.MarkFlagRequired("kas")

	return cmd
}

// runList handles argument and flag extraction
func runList(cmd *cobra.Command, args []string, handler ListHandler) error {
	limit, _ := cmd.Flags().GetString("limit")
	offset, _ := cmd.Flags().GetString("offset")
	algorithm, _ := cmd.Flags().GetString("algorithm")
	kas, _ := cmd.Flags().GetString("kas")

	// Create request
	req := &ListRequest{
		Flags: ListRequestFlags{
			Limit: limit,
			Offset: offset,
			Algorithm: algorithm,
			Kas: kas,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
