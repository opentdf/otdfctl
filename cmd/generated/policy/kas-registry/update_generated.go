// Code generated by adder. DO NOT EDIT.

package policy_kas_registry

import (
	
	"github.com/spf13/cobra"
)

// UpdateRequestFlags represents the flags for the update command
type UpdateRequestFlags struct {
	Id string `json:"id"` // ID of the Key Access Server registration
	Uri string `json:"uri"` // URI of the Key Access Server
	PublicKeys string `json:"publicKeys"` // One or more 'cached' public keys saved for the KAS
	PublicKeyRemote string `json:"publicKeyRemote"` // URI of the 'remote' public key of the Key Access Server
	Name string `json:"name"` // Optional name of the registered KAS (must be unique within Policy)
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
	ForceReplaceLabels string `json:"forceReplaceLabels"` // Destructively replace entire set of existing metadata 'labels' with any provided to this command
}

// UpdateRequest represents the parameters for the update command
type UpdateRequest struct {
	Flags UpdateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// UpdateHandler defines the function type for handling update commands
type UpdateHandler func(cmd *cobra.Command, req *UpdateRequest) error

// NewUpdateCommand creates a new update command with the provided handler function
func NewUpdateCommand(handler UpdateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "update",
		Aliases: []string{"u"},
		Short:   "Update a Key Access Server registration",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUpdate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("id", "i", "", "ID of the Key Access Server registration")
	cmd.MarkFlagRequired("id")
	cmd.Flags().StringP("uri", "u", "", "URI of the Key Access Server")
	cmd.Flags().StringP("public-keys", "c", "", "One or more 'cached' public keys saved for the KAS")
	cmd.Flags().StringP("public-key-remote", "r", "", "URI of the 'remote' public key of the Key Access Server")
	cmd.Flags().String("name", "", "Optional name of the registered KAS (must be unique within Policy)")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")
	cmd.Flags().String("force-replace-labels", "%!s(bool=false)", "Destructively replace entire set of existing metadata 'labels' with any provided to this command")

	return cmd
}

// runUpdate handles argument and flag extraction
func runUpdate(cmd *cobra.Command, args []string, handler UpdateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	uri, _ := cmd.Flags().GetString("uri")
	publicKeys, _ := cmd.Flags().GetString("public-keys")
	publicKeyRemote, _ := cmd.Flags().GetString("public-key-remote")
	name, _ := cmd.Flags().GetString("name")
	label, _ := cmd.Flags().GetString("label")
	forceReplaceLabels, _ := cmd.Flags().GetString("force-replace-labels")

	// Create request
	req := &UpdateRequest{
		Flags: UpdateRequestFlags{
			Id: id,
			Uri: uri,
			PublicKeys: publicKeys,
			PublicKeyRemote: publicKeyRemote,
			Name: name,
			Label: label,
			ForceReplaceLabels: forceReplaceLabels,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
