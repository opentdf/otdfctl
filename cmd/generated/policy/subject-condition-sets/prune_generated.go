// Code generated by adder. DO NOT EDIT.

package policy_subject_condition_sets

import (
	
	"github.com/spf13/cobra"
)

// PruneRequestFlags represents the flags for the prune command
type PruneRequestFlags struct {
	Force string `json:"force"` // Force prune without interactive confirmation (dangerous)
}

// PruneRequest represents the parameters for the prune command
type PruneRequest struct {
	Flags PruneRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// PruneHandler defines the function type for handling prune commands
type PruneHandler func(cmd *cobra.Command, req *PruneRequest) error

// NewPruneCommand creates a new prune command with the provided handler function
func NewPruneCommand(handler PruneHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "prune",
		Short:   "Prune (delete all un-mapped Subject Condition Sets)",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runPrune(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("force", "", "Force prune without interactive confirmation (dangerous)")

	return cmd
}

// runPrune handles argument and flag extraction
func runPrune(cmd *cobra.Command, args []string, handler PruneHandler) error {
	force, _ := cmd.Flags().GetString("force")

	// Create request
	req := &PruneRequest{
		Flags: PruneRequestFlags{
			Force: force,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
