// Code generated by adder. DO NOT EDIT.

package policy_attributes

import (
	"fmt"
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	Name string `json:"name"` // Name of the attribute
	Rule string `json:"rule" validate:"oneof=ANY_OF ALL_OF HIERARCHY"` // Rule of the attribute
	Value string `json:"value"` // Value of the attribute (i.e. 'value1')
	Namespace string `json:"namespace"` // Namespace ID of the attribute
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"new", "add", "c"},
		Short:   "Create an attribute definition",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("name", "", "Name of the attribute")
	cmd.MarkFlagRequired("name")
	cmd.Flags().StringP("rule", "r", "", "Rule of the attribute")
	cmd.MarkFlagRequired("rule")
	cmd.Flags().StringP("value", "v", "", "Value of the attribute (i.e. 'value1')")
	cmd.MarkFlagRequired("value")
	cmd.Flags().StringP("namespace", "s", "", "Namespace ID of the attribute")
	cmd.MarkFlagRequired("namespace")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	name, _ := cmd.Flags().GetString("name")
	rule, _ := cmd.Flags().GetString("rule")
	value, _ := cmd.Flags().GetString("value")
	namespace, _ := cmd.Flags().GetString("namespace")
	label, _ := cmd.Flags().GetString("label")
	// Validate enum for rule
	ruleValid := false
	for _, validValue := range []string{"ANY_OF", "ALL_OF", "HIERARCHY"} {
		if rule == validValue {
			ruleValid = true
			break
		}
	}
	if !ruleValid {
		return fmt.Errorf("invalid rule: %s (must be ANY_OF, ALL_OF, or HIERARCHY)", rule)
	}

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			Name: name,
			Rule: rule,
			Value: value,
			Namespace: namespace,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
