// Code generated by adder. DO NOT EDIT.

package policy_attributes_unsafe

import (
	"fmt"
	
	"github.com/spf13/cobra"
)

// UpdateRequestFlags represents the flags for the update command
type UpdateRequestFlags struct {
	Id string `json:"id"` // ID of the attribute definition
	Name string `json:"name"` // Name of the attribute definition
	Rule string `json:"rule" validate:"oneof=ANY_OF ALL_OF HIERARCHY"` // Rule of the attribute definition
	ValuesOrder string `json:"valuesOrder"` // Order of the attribute values (IDs)
}

// UpdateRequest represents the parameters for the update command
type UpdateRequest struct {
	Flags UpdateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// UpdateHandler defines the function type for handling update commands
type UpdateHandler func(cmd *cobra.Command, req *UpdateRequest) error

// NewUpdateCommand creates a new update command with the provided handler function
func NewUpdateCommand(handler UpdateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "update",
		Short:   "Update an attribute definition",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUpdate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("id", "i", "", "ID of the attribute definition")
	cmd.MarkFlagRequired("id")
	cmd.Flags().String("name", "", "Name of the attribute definition")
	cmd.Flags().StringP("rule", "r", "", "Rule of the attribute definition")
	cmd.Flags().StringP("values-order", "o", "", "Order of the attribute values (IDs)")

	return cmd
}

// runUpdate handles argument and flag extraction
func runUpdate(cmd *cobra.Command, args []string, handler UpdateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	name, _ := cmd.Flags().GetString("name")
	rule, _ := cmd.Flags().GetString("rule")
	valuesOrder, _ := cmd.Flags().GetString("values-order")
	// Validate enum for rule
	ruleValid := false
	for _, validValue := range []string{"ANY_OF", "ALL_OF", "HIERARCHY"} {
		if rule == validValue {
			ruleValid = true
			break
		}
	}
	if !ruleValid {
		return fmt.Errorf("invalid rule: %s (must be ANY_OF, ALL_OF, or HIERARCHY)", rule)
	}

	// Create request
	req := &UpdateRequest{
		Flags: UpdateRequestFlags{
			Id: id,
			Name: name,
			Rule: rule,
			ValuesOrder: valuesOrder,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
