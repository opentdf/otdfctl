// Code generated by adder. DO NOT EDIT.

package policy_attributes_key

import (
	
	"github.com/spf13/cobra"
)

// AssignRequestFlags represents the flags for the assign command
type AssignRequestFlags struct {
	Attribute string `json:"attribute"` // URI or ID of the attribute definition
	KeyId string `json:"keyId"` // ID of the KAS key to assign
}

// AssignRequest represents the parameters for the assign command
type AssignRequest struct {
	Flags AssignRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// AssignHandler defines the function type for handling assign commands
type AssignHandler func(cmd *cobra.Command, req *AssignRequest) error

// NewAssignCommand creates a new assign command with the provided handler function
func NewAssignCommand(handler AssignHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "assign",
		Short:   "Assign a KAS key to an attribute definition",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runAssign(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("attribute", "a", "", "URI or ID of the attribute definition")
	cmd.MarkFlagRequired("attribute")
	cmd.Flags().StringP("key-id", "k", "", "ID of the KAS key to assign")
	cmd.MarkFlagRequired("key-id")

	return cmd
}

// runAssign handles argument and flag extraction
func runAssign(cmd *cobra.Command, args []string, handler AssignHandler) error {
	attribute, _ := cmd.Flags().GetString("attribute")
	keyId, _ := cmd.Flags().GetString("key-id")

	// Create request
	req := &AssignRequest{
		Flags: AssignRequestFlags{
			Attribute: attribute,
			KeyId: keyId,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
