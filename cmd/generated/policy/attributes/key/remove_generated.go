// Code generated by adder. DO NOT EDIT.

package policy_attributes_key

import (
	
	"github.com/spf13/cobra"
)

// RemoveRequestFlags represents the flags for the remove command
type RemoveRequestFlags struct {
	Attribute string `json:"attribute"` // URI or ID of attribute definition
	KeyId string `json:"keyId"` // ID of the KAS key to remove
}

// RemoveRequest represents the parameters for the remove command
type RemoveRequest struct {
	Flags RemoveRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// RemoveHandler defines the function type for handling remove commands
type RemoveHandler func(cmd *cobra.Command, req *RemoveRequest) error

// NewRemoveCommand creates a new remove command with the provided handler function
func NewRemoveCommand(handler RemoveHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "remove",
		Short:   "Remove a KAS key from an attribute definition",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runRemove(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("attribute", "a", "", "URI or ID of attribute definition")
	cmd.MarkFlagRequired("attribute")
	cmd.Flags().StringP("key-id", "k", "", "ID of the KAS key to remove")
	cmd.MarkFlagRequired("key-id")

	return cmd
}

// runRemove handles argument and flag extraction
func runRemove(cmd *cobra.Command, args []string, handler RemoveHandler) error {
	attribute, _ := cmd.Flags().GetString("attribute")
	keyId, _ := cmd.Flags().GetString("key-id")

	// Create request
	req := &RemoveRequest{
		Flags: RemoveRequestFlags{
			Attribute: attribute,
			KeyId: keyId,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
