// Code generated by adder. DO NOT EDIT.

package policy_attributes_values

import (
	"fmt"
	
	"github.com/spf13/cobra"
)

// ListRequestFlags represents the flags for the list command
type ListRequestFlags struct {
	AttributeId string `json:"attributeId"` // The ID of the attribute to list values for
	State string `json:"state" validate:"oneof=active inactive any"` // Filter by state
	Limit string `json:"limit"` // Limit retrieved count
	Offset string `json:"offset"` // Offset (page) quantity from start of the list
}

// ListRequest represents the parameters for the list command
type ListRequest struct {
	Flags ListRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// ListHandler defines the function type for handling list commands
type ListHandler func(cmd *cobra.Command, req *ListRequest) error

// NewListCommand creates a new list command with the provided handler function
func NewListCommand(handler ListHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"ls", "l"},
		Short:   "List attribute values",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runList(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("attribute-id", "a", "", "The ID of the attribute to list values for")
	cmd.Flags().StringP("state", "s", "active", "Filter by state")
	cmd.Flags().StringP("limit", "l", "", "Limit retrieved count")
	cmd.Flags().StringP("offset", "o", "", "Offset (page) quantity from start of the list")

	return cmd
}

// runList handles argument and flag extraction
func runList(cmd *cobra.Command, args []string, handler ListHandler) error {
	attributeId, _ := cmd.Flags().GetString("attribute-id")
	state, _ := cmd.Flags().GetString("state")
	limit, _ := cmd.Flags().GetString("limit")
	offset, _ := cmd.Flags().GetString("offset")
	// Validate enum for state
	stateValid := false
	for _, validValue := range []string{"active", "inactive", "any"} {
		if state == validValue {
			stateValid = true
			break
		}
	}
	if !stateValid {
		return fmt.Errorf("invalid state: %s (must be active, inactive, or any)", state)
	}

	// Create request
	req := &ListRequest{
		Flags: ListRequestFlags{
			AttributeId: attributeId,
			State: state,
			Limit: limit,
			Offset: offset,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
