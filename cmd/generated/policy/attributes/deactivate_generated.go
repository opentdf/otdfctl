// Code generated by adder. DO NOT EDIT.

package policy_attributes

import (
	
	"github.com/spf13/cobra"
)

// DeactivateRequestFlags represents the flags for the deactivate command
type DeactivateRequestFlags struct {
	Id string `json:"id"` // ID of the attribute
	Force string `json:"force"` // Force deactivation without interactive confirmation (dangerous)
}

// DeactivateRequest represents the parameters for the deactivate command
type DeactivateRequest struct {
	Flags DeactivateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// DeactivateHandler defines the function type for handling deactivate commands
type DeactivateHandler func(cmd *cobra.Command, req *DeactivateRequest) error

// NewDeactivateCommand creates a new deactivate command with the provided handler function
func NewDeactivateCommand(handler DeactivateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "deactivate",
		Short:   "Deactivate an attribute definition",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runDeactivate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("id", "i", "", "ID of the attribute")
	cmd.MarkFlagRequired("id")
	cmd.Flags().String("force", "", "Force deactivation without interactive confirmation (dangerous)")

	return cmd
}

// runDeactivate handles argument and flag extraction
func runDeactivate(cmd *cobra.Command, args []string, handler DeactivateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	force, _ := cmd.Flags().GetString("force")

	// Create request
	req := &DeactivateRequest{
		Flags: DeactivateRequestFlags{
			Id: id,
			Force: force,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
