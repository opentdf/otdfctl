// Code generated by adder. DO NOT EDIT.

package policy_attributes_namespaces_unsafe

import (
	
	"github.com/spf13/cobra"
)

// UpdateRequestFlags represents the flags for the update command
type UpdateRequestFlags struct {
	Id string `json:"id"` // ID of the attribute namespace
	Name string `json:"name"` // Name of the attribute namespace (new)
}

// UpdateRequest represents the parameters for the update command
type UpdateRequest struct {
	Flags UpdateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// UpdateHandler defines the function type for handling update commands
type UpdateHandler func(cmd *cobra.Command, req *UpdateRequest) error

// NewUpdateCommand creates a new update command with the provided handler function
func NewUpdateCommand(handler UpdateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "update",
		Short:   "Update an attribute namespace",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUpdate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("id", "i", "", "ID of the attribute namespace")
	cmd.MarkFlagRequired("id")
	cmd.Flags().String("name", "", "Name of the attribute namespace (new)")
	cmd.MarkFlagRequired("name")

	return cmd
}

// runUpdate handles argument and flag extraction
func runUpdate(cmd *cobra.Command, args []string, handler UpdateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	name, _ := cmd.Flags().GetString("name")

	// Create request
	req := &UpdateRequest{
		Flags: UpdateRequestFlags{
			Id: id,
			Name: name,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
