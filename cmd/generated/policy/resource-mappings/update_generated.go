// Code generated by adder. DO NOT EDIT.

package policy_resource_mappings

import (
	
	"github.com/spf13/cobra"
)

// UpdateRequestFlags represents the flags for the update command
type UpdateRequestFlags struct {
	Id string `json:"id"` // The ID of the resource mapping to update.
	AttributeValueId string `json:"attributeValueId"` // The ID of the attribute value to map to the resource.
	Terms string `json:"terms"` // The synonym terms to match for the resource mapping.
	GroupId string `json:"groupId"` // The ID of the resource mapping group to assign this mapping to
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
	ForceReplaceLabels string `json:"forceReplaceLabels"` // Destructively replace entire set of existing metadata 'labels' with any provided to this command
}

// UpdateRequest represents the parameters for the update command
type UpdateRequest struct {
	Flags UpdateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// UpdateHandler defines the function type for handling update commands
type UpdateHandler func(cmd *cobra.Command, req *UpdateRequest) error

// NewUpdateCommand creates a new update command with the provided handler function
func NewUpdateCommand(handler UpdateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "update",
		Aliases: []string{"u"},
		Short:   "Update a resource mapping",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUpdate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("id", "", "The ID of the resource mapping to update.")
	cmd.Flags().String("attribute-value-id", "", "The ID of the attribute value to map to the resource.")
	cmd.Flags().String("terms", "", "The synonym terms to match for the resource mapping.")
	cmd.Flags().String("group-id", "", "The ID of the resource mapping group to assign this mapping to")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")
	cmd.Flags().String("force-replace-labels", "%!s(bool=false)", "Destructively replace entire set of existing metadata 'labels' with any provided to this command")

	return cmd
}

// runUpdate handles argument and flag extraction
func runUpdate(cmd *cobra.Command, args []string, handler UpdateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	attributeValueId, _ := cmd.Flags().GetString("attribute-value-id")
	terms, _ := cmd.Flags().GetString("terms")
	groupId, _ := cmd.Flags().GetString("group-id")
	label, _ := cmd.Flags().GetString("label")
	forceReplaceLabels, _ := cmd.Flags().GetString("force-replace-labels")

	// Create request
	req := &UpdateRequest{
		Flags: UpdateRequestFlags{
			Id: id,
			AttributeValueId: attributeValueId,
			Terms: terms,
			GroupId: groupId,
			Label: label,
			ForceReplaceLabels: forceReplaceLabels,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
