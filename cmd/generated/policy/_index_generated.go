// Code generated by adder. DO NOT EDIT.

package policy

import (
	
	"github.com/spf13/cobra"
)

// PolicyRequestFlags represents the flags for the policy command
type PolicyRequestFlags struct {
	Json string `json:"json"` // output single command in JSON (overrides configured output format)
}

// PolicyRequest represents the parameters for the policy command
type PolicyRequest struct {
	Flags PolicyRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// PolicyHandler defines the function type for handling policy commands
type PolicyHandler func(cmd *cobra.Command, req *PolicyRequest) error

// NewPolicyCommand creates a new policy command with the provided handler function
func NewPolicyCommand(handler PolicyHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "policy",
		Aliases: []string{"pol", "policies"},
		Short:   "Manage policy",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runPolicy(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("json", "false", "output single command in JSON (overrides configured output format)")

	return cmd
}

// runPolicy handles argument and flag extraction
func runPolicy(cmd *cobra.Command, args []string, handler PolicyHandler) error {
	json, _ := cmd.Flags().GetString("json")

	// Create request
	req := &PolicyRequest{
		Flags: PolicyRequestFlags{
			Json: json,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
