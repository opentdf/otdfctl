// Code generated by adder. DO NOT EDIT.

package policy_resource_mapping_groups

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	NamespaceId string `json:"namespaceId"` // The ID of the namespace of the group
	Name string `json:"name"` // The name of the group
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"add", "new", "c"},
		Short:   "Create a resource mapping group",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("namespace-id", "", "The ID of the namespace of the group")
	cmd.Flags().String("name", "", "The name of the group")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	namespaceId, _ := cmd.Flags().GetString("namespace-id")
	name, _ := cmd.Flags().GetString("name")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			NamespaceId: namespaceId,
			Name: name,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
