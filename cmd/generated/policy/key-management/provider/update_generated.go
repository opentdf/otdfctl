// Code generated by adder. DO NOT EDIT.

package policy_key_management_provider

import (
	
	"github.com/spf13/cobra"
)

// UpdateRequestFlags represents the flags for the update command
type UpdateRequestFlags struct {
	Id string `json:"id"` // ID of the provider config to update
	Name string `json:"name"` // New name for the provider config
	Config string `json:"config"` // New JSON configuration for the provider
	Label string `json:"label"` // Metadata labels for the provider config
}

// UpdateRequest represents the parameters for the update command
type UpdateRequest struct {
	Flags UpdateRequestFlags `json:"flags"`
}

// UpdateHandler defines the interface for handling update commands
type UpdateHandler interface {
	HandleUpdate(cmd *cobra.Command, req *UpdateRequest) error
}

// NewUpdateCommand creates a new update command with the provided handler
func NewUpdateCommand(handler UpdateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "update",
		Aliases: []string{"u"},
		Short:   "Update a Provider Config",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUpdate(cmd, args, handler)
		},
	}

	// Register flags
	cmd.Flags().StringP("id", "i", "", "ID of the provider config to update")
	cmd.MarkFlagRequired("id")
	cmd.Flags().String("name", "", "New name for the provider config")
	cmd.Flags().StringP("config", "c", "", "New JSON configuration for the provider")
	cmd.Flags().StringP("label", "l", "", "Metadata labels for the provider config")

	return cmd
}

// runUpdate handles argument and flag extraction
func runUpdate(cmd *cobra.Command, args []string, handler UpdateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	name, _ := cmd.Flags().GetString("name")
	config, _ := cmd.Flags().GetString("config")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &UpdateRequest{
		Flags: UpdateRequestFlags{
			Id: id,
			Name: name,
			Config: config,
			Label: label,
		},
	}

	// Call handler
	return handler.HandleUpdate(cmd, req)
}
