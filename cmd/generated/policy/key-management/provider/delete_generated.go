// Code generated by adder. DO NOT EDIT.

package policy_key_management_provider

import (
	
	"github.com/spf13/cobra"
)

// DeleteRequestFlags represents the flags for the delete command
type DeleteRequestFlags struct {
	Force string `json:"force"` // Force the deletion of a provider configuration without confirmation
	Id string `json:"id"` // ID of the provider config to delete
}

// DeleteRequest represents the parameters for the delete command
type DeleteRequest struct {
	Flags DeleteRequestFlags `json:"flags"`
}

// DeleteHandler defines the interface for handling delete commands
type DeleteHandler interface {
	HandleDelete(cmd *cobra.Command, req *DeleteRequest) error
}

// NewDeleteCommand creates a new delete command with the provided handler
func NewDeleteCommand(handler DeleteHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "delete",
		Aliases: []string{"d", "remove"},
		Short:   "Delete a Provider Config",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runDelete(cmd, args, handler)
		},
	}

	// Register flags
	cmd.Flags().StringP("force", "f", "", "Force the deletion of a provider configuration without confirmation")
	cmd.Flags().StringP("id", "i", "", "ID of the provider config to delete")
	cmd.MarkFlagRequired("id")

	return cmd
}

// runDelete handles argument and flag extraction
func runDelete(cmd *cobra.Command, args []string, handler DeleteHandler) error {
	force, _ := cmd.Flags().GetString("force")
	id, _ := cmd.Flags().GetString("id")

	// Create request
	req := &DeleteRequest{
		Flags: DeleteRequestFlags{
			Force: force,
			Id: id,
		},
	}

	// Call handler
	return handler.HandleDelete(cmd, req)
}
