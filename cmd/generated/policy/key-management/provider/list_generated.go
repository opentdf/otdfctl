// Code generated by adder. DO NOT EDIT.

package policy_key_management_provider

import (
	
	"github.com/spf13/cobra"
)

// ListRequestFlags represents the flags for the list command
type ListRequestFlags struct {
	Limit string `json:"limit"` // Maximum number of results to return
	Offset string `json:"offset"` // Offset for pagination
}

// ListRequest represents the parameters for the list command
type ListRequest struct {
	Flags ListRequestFlags `json:"flags"`
}

// ListHandler defines the interface for handling list commands
type ListHandler interface {
	HandleList(cmd *cobra.Command, req *ListRequest) error
}

// NewListCommand creates a new list command with the provided handler
func NewListCommand(handler ListHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"l"},
		Short:   "List Provider Configs",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runList(cmd, args, handler)
		},
	}

	// Register flags
	cmd.Flags().StringP("limit", "l", "", "Maximum number of results to return")
	cmd.MarkFlagRequired("limit")
	cmd.Flags().StringP("offset", "o", "", "Offset for pagination")
	cmd.MarkFlagRequired("offset")

	return cmd
}

// runList handles argument and flag extraction
func runList(cmd *cobra.Command, args []string, handler ListHandler) error {
	limit, _ := cmd.Flags().GetString("limit")
	offset, _ := cmd.Flags().GetString("offset")

	// Create request
	req := &ListRequest{
		Flags: ListRequestFlags{
			Limit: limit,
			Offset: offset,
		},
	}

	// Call handler
	return handler.HandleList(cmd, req)
}
