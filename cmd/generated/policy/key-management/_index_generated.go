// Code generated by adder. DO NOT EDIT.

package policy_key_management

import (
	
	"github.com/spf13/cobra"
)

// KeymanagementRequestFlags represents the flags for the keymanagement command
type KeymanagementRequestFlags struct {
	Json string `json:"json"` // output single command in JSON (overrides configured output format)
}

// KeymanagementRequest represents the parameters for the keymanagement command
type KeymanagementRequest struct {
	Flags KeymanagementRequestFlags `json:"flags"`
}

// KeymanagementHandler defines the interface for handling keymanagement commands
type KeymanagementHandler interface {
	HandleKeymanagement(cmd *cobra.Command, req *KeymanagementRequest) error
}

// NewKeymanagementCommand creates a new keymanagement command with the provided handler
func NewKeymanagementCommand(handler KeymanagementHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "keymanagement",
		Aliases: []string{"k"},
		Short:   "Key management",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runKeymanagement(cmd, args, handler)
		},
	}

	// Register flags
	cmd.Flags().String("json", "false", "output single command in JSON (overrides configured output format)")

	return cmd
}

// runKeymanagement handles argument and flag extraction
func runKeymanagement(cmd *cobra.Command, args []string, handler KeymanagementHandler) error {
	json, _ := cmd.Flags().GetString("json")

	// Create request
	req := &KeymanagementRequest{
		Flags: KeymanagementRequestFlags{
			Json: json,
		},
	}

	// Call handler
	return handler.HandleKeymanagement(cmd, req)
}
