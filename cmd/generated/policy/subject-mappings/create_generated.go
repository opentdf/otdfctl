// Code generated by adder. DO NOT EDIT.

package policy_subject_mappings

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	AttributeValueId string `json:"attributeValueId"` // The ID of the attribute value to map to a subject condition set
	Action string `json:"action"` // Each 'id' or 'name' of an Action to be entitled (i.e. 'create', 'read', 'update', 'delete')
	SubjectConditionSetId string `json:"subjectConditionSetId"` // Known preexisting Subject Condition Set Id
	SubjectConditionSetNew string `json:"subjectConditionSetNew"` // JSON array of Subject Sets to create a new Subject Condition Set associated with the created Subject Mapping
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
	ActionStandard string `json:"actionStandard"` // Deprecated. Migrated to '--action'.
	ActionCustom string `json:"actionCustom"` // Deprecated. Migrated to '--action'.
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"new", "add", "c"},
		Short:   "Create a new subject mapping",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("attribute-value-id", "a", "", "The ID of the attribute value to map to a subject condition set")
	cmd.MarkFlagRequired("attribute-value-id")
	cmd.Flags().String("action", "", "Each 'id' or 'name' of an Action to be entitled (i.e. 'create', 'read', 'update', 'delete')")
	cmd.Flags().String("subject-condition-set-id", "", "Known preexisting Subject Condition Set Id")
	cmd.Flags().String("subject-condition-set-new", "", "JSON array of Subject Sets to create a new Subject Condition Set associated with the created Subject Mapping")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")
	cmd.Flags().StringP("action-standard", "s", "", "Deprecated. Migrated to '--action'.")
	cmd.Flags().StringP("action-custom", "c", "", "Deprecated. Migrated to '--action'.")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	attributeValueId, _ := cmd.Flags().GetString("attribute-value-id")
	action, _ := cmd.Flags().GetString("action")
	subjectConditionSetId, _ := cmd.Flags().GetString("subject-condition-set-id")
	subjectConditionSetNew, _ := cmd.Flags().GetString("subject-condition-set-new")
	label, _ := cmd.Flags().GetString("label")
	actionStandard, _ := cmd.Flags().GetString("action-standard")
	actionCustom, _ := cmd.Flags().GetString("action-custom")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			AttributeValueId: attributeValueId,
			Action: action,
			SubjectConditionSetId: subjectConditionSetId,
			SubjectConditionSetNew: subjectConditionSetNew,
			Label: label,
			ActionStandard: actionStandard,
			ActionCustom: actionCustom,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
