// Code generated by adder. DO NOT EDIT.

package policy_subject_mappings

import (
	
	"github.com/spf13/cobra"
)

// UpdateRequestFlags represents the flags for the update command
type UpdateRequestFlags struct {
	Id string `json:"id"` // The ID of the subject mapping to update
	Action string `json:"action"` // Each 'id' or 'name' of an Action to be entitled (i.e. 'create', 'read', 'update', 'delete')
	ActionStandard string `json:"actionStandard"` // Deprecated. Migrated to '--action'.
	ActionCustom string `json:"actionCustom"` // Deprecated. Migrated to '--action'.
	SubjectConditionSetId string `json:"subjectConditionSetId"` // Known preexisting Subject Condition Set Id
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
	ForceReplaceLabels string `json:"forceReplaceLabels"` // Destructively replace entire set of existing metadata 'labels' with any provided to this command
}

// UpdateRequest represents the parameters for the update command
type UpdateRequest struct {
	Flags UpdateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// UpdateHandler defines the function type for handling update commands
type UpdateHandler func(cmd *cobra.Command, req *UpdateRequest) error

// NewUpdateCommand creates a new update command with the provided handler function
func NewUpdateCommand(handler UpdateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "update",
		Aliases: []string{"u"},
		Short:   "Update a subject mapping",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUpdate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("id", "i", "", "The ID of the subject mapping to update")
	cmd.MarkFlagRequired("id")
	cmd.Flags().String("action", "", "Each 'id' or 'name' of an Action to be entitled (i.e. 'create', 'read', 'update', 'delete')")
	cmd.Flags().StringP("action-standard", "s", "", "Deprecated. Migrated to '--action'.")
	cmd.Flags().StringP("action-custom", "c", "", "Deprecated. Migrated to '--action'.")
	cmd.Flags().String("subject-condition-set-id", "", "Known preexisting Subject Condition Set Id")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")
	cmd.Flags().String("force-replace-labels", "%!s(bool=false)", "Destructively replace entire set of existing metadata 'labels' with any provided to this command")

	return cmd
}

// runUpdate handles argument and flag extraction
func runUpdate(cmd *cobra.Command, args []string, handler UpdateHandler) error {
	id, _ := cmd.Flags().GetString("id")
	action, _ := cmd.Flags().GetString("action")
	actionStandard, _ := cmd.Flags().GetString("action-standard")
	actionCustom, _ := cmd.Flags().GetString("action-custom")
	subjectConditionSetId, _ := cmd.Flags().GetString("subject-condition-set-id")
	label, _ := cmd.Flags().GetString("label")
	forceReplaceLabels, _ := cmd.Flags().GetString("force-replace-labels")

	// Create request
	req := &UpdateRequest{
		Flags: UpdateRequestFlags{
			Id: id,
			Action: action,
			ActionStandard: actionStandard,
			ActionCustom: actionCustom,
			SubjectConditionSetId: subjectConditionSetId,
			Label: label,
			ForceReplaceLabels: forceReplaceLabels,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
