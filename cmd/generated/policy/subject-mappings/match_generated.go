// Code generated by adder. DO NOT EDIT.

package policy_subject_mappings

import (
	
	"github.com/spf13/cobra"
)

// MatchRequestFlags represents the flags for the match command
type MatchRequestFlags struct {
	Subject string `json:"subject"` // A Subject Entity Representation string (JSON or JWT, auto-detected)
	Selector string `json:"selector"` // Individual selectors (i.e. '.department' or '.realm_access.roles[]') that may be found in SubjectConditionSets
}

// MatchRequest represents the parameters for the match command
type MatchRequest struct {
	Flags MatchRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// MatchHandler defines the function type for handling match commands
type MatchHandler func(cmd *cobra.Command, req *MatchRequest) error

// NewMatchCommand creates a new match command with the provided handler function
func NewMatchCommand(handler MatchHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "match",
		Short:   "Match a subject or set of selectors to relevant subject mappings",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runMatch(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("subject", "s", "", "A Subject Entity Representation string (JSON or JWT, auto-detected)")
	cmd.Flags().StringP("selector", "x", "", "Individual selectors (i.e. '.department' or '.realm_access.roles[]') that may be found in SubjectConditionSets")

	return cmd
}

// runMatch handles argument and flag extraction
func runMatch(cmd *cobra.Command, args []string, handler MatchHandler) error {
	subject, _ := cmd.Flags().GetString("subject")
	selector, _ := cmd.Flags().GetString("selector")

	// Create request
	req := &MatchRequest{
		Flags: MatchRequestFlags{
			Subject: subject,
			Selector: selector,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
