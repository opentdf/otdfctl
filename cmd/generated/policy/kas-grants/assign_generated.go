// Code generated by adder. DO NOT EDIT.

package policy_kas_grants

import (
	
	"github.com/spf13/cobra"
)

// AssignRequestFlags represents the flags for the assign command
type AssignRequestFlags struct {
	NamespaceId string `json:"namespaceId"` // The ID of the Namespace being assigned a KAS Grant
	AttributeId string `json:"attributeId"` // The ID of the Attribute Definition being assigned a KAS Grant
	ValueId string `json:"valueId"` // The ID of the Value being assigned a KAS Grant
	KasId string `json:"kasId"` // The ID of the Key Access Server being assigned to the grant
	Label string `json:"label"` // Optional metadata 'labels' in the format: key=value
	ForceReplaceLabels string `json:"forceReplaceLabels"` // Destructively replace entire set of existing metadata 'labels' with any provided to this command
}

// AssignRequest represents the parameters for the assign command
type AssignRequest struct {
	Flags AssignRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// AssignHandler defines the function type for handling assign commands
type AssignHandler func(cmd *cobra.Command, req *AssignRequest) error

// NewAssignCommand creates a new assign command with the provided handler function
func NewAssignCommand(handler AssignHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "assign",
		Aliases: []string{"u", "update", "create", "add", "new", "upsert"},
		Short:   "Assign a grant",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runAssign(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("namespace-id", "", "The ID of the Namespace being assigned a KAS Grant")
	cmd.Flags().StringP("attribute-id", "a", "", "The ID of the Attribute Definition being assigned a KAS Grant")
	cmd.MarkFlagRequired("attribute-id")
	cmd.Flags().StringP("value-id", "v", "", "The ID of the Value being assigned a KAS Grant")
	cmd.MarkFlagRequired("value-id")
	cmd.Flags().StringP("kas-id", "k", "", "The ID of the Key Access Server being assigned to the grant")
	cmd.MarkFlagRequired("kas-id")
	cmd.Flags().StringP("label", "l", "", "Optional metadata 'labels' in the format: key=value")
	cmd.Flags().String("force-replace-labels", "%!s(bool=false)", "Destructively replace entire set of existing metadata 'labels' with any provided to this command")

	return cmd
}

// runAssign handles argument and flag extraction
func runAssign(cmd *cobra.Command, args []string, handler AssignHandler) error {
	namespaceId, _ := cmd.Flags().GetString("namespace-id")
	attributeId, _ := cmd.Flags().GetString("attribute-id")
	valueId, _ := cmd.Flags().GetString("value-id")
	kasId, _ := cmd.Flags().GetString("kas-id")
	label, _ := cmd.Flags().GetString("label")
	forceReplaceLabels, _ := cmd.Flags().GetString("force-replace-labels")

	// Create request
	req := &AssignRequest{
		Flags: AssignRequestFlags{
			NamespaceId: namespaceId,
			AttributeId: attributeId,
			ValueId: valueId,
			KasId: kasId,
			Label: label,
			ForceReplaceLabels: forceReplaceLabels,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
