// Code generated by adder. DO NOT EDIT.

package policy_kas_grants

import (
	
	"github.com/spf13/cobra"
)

// ListRequestFlags represents the flags for the list command
type ListRequestFlags struct {
	Kas string `json:"kas"` // The optional ID or URI of a KAS to filter the list
	Limit string `json:"limit"` // Limit retrieved count
	Offset string `json:"offset"` // Offset (page) quantity from start of the list
}

// ListRequest represents the parameters for the list command
type ListRequest struct {
	Flags ListRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// ListHandler defines the function type for handling list commands
type ListHandler func(cmd *cobra.Command, req *ListRequest) error

// NewListCommand creates a new list command with the provided handler function
func NewListCommand(handler ListHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "list",
		Aliases: []string{"l"},
		Short:   "List KAS Grants",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runList(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("kas", "k", "", "The optional ID or URI of a KAS to filter the list")
	cmd.Flags().StringP("limit", "l", "", "Limit retrieved count")
	cmd.Flags().StringP("offset", "o", "", "Offset (page) quantity from start of the list")

	return cmd
}

// runList handles argument and flag extraction
func runList(cmd *cobra.Command, args []string, handler ListHandler) error {
	kas, _ := cmd.Flags().GetString("kas")
	limit, _ := cmd.Flags().GetString("limit")
	offset, _ := cmd.Flags().GetString("offset")

	// Create request
	req := &ListRequest{
		Flags: ListRequestFlags{
			Kas: kas,
			Limit: limit,
			Offset: offset,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
