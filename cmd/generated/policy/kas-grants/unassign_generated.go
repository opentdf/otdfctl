// Code generated by adder. DO NOT EDIT.

package policy_kas_grants

import (
	
	"github.com/spf13/cobra"
)

// UnassignRequestFlags represents the flags for the unassign command
type UnassignRequestFlags struct {
	NamespaceId string `json:"namespaceId"` // The ID of the Namespace being unassigned a KAS Grant
	AttributeId string `json:"attributeId"` // The ID of the Attribute Definition being unassigned the KAS grant
	ValueId string `json:"valueId"` // The ID of the Value being unassigned the KAS Grant
	KasId string `json:"kasId"` // The Key Access Server (KAS) ID being unassigned a grant
	Force string `json:"force"` // Force the unassignment with no confirmation
}

// UnassignRequest represents the parameters for the unassign command
type UnassignRequest struct {
	Flags UnassignRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// UnassignHandler defines the function type for handling unassign commands
type UnassignHandler func(cmd *cobra.Command, req *UnassignRequest) error

// NewUnassignCommand creates a new unassign command with the provided handler function
func NewUnassignCommand(handler UnassignHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "unassign",
		Aliases: []string{"delete", "remove"},
		Short:   "Unassign a grant",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runUnassign(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("namespace-id", "", "The ID of the Namespace being unassigned a KAS Grant")
	cmd.Flags().StringP("attribute-id", "a", "", "The ID of the Attribute Definition being unassigned the KAS grant")
	cmd.MarkFlagRequired("attribute-id")
	cmd.Flags().StringP("value-id", "v", "", "The ID of the Value being unassigned the KAS Grant")
	cmd.MarkFlagRequired("value-id")
	cmd.Flags().StringP("kas-id", "k", "", "The Key Access Server (KAS) ID being unassigned a grant")
	cmd.MarkFlagRequired("kas-id")
	cmd.Flags().String("force", "", "Force the unassignment with no confirmation")

	return cmd
}

// runUnassign handles argument and flag extraction
func runUnassign(cmd *cobra.Command, args []string, handler UnassignHandler) error {
	namespaceId, _ := cmd.Flags().GetString("namespace-id")
	attributeId, _ := cmd.Flags().GetString("attribute-id")
	valueId, _ := cmd.Flags().GetString("value-id")
	kasId, _ := cmd.Flags().GetString("kas-id")
	force, _ := cmd.Flags().GetString("force")

	// Create request
	req := &UnassignRequest{
		Flags: UnassignRequestFlags{
			NamespaceId: namespaceId,
			AttributeId: attributeId,
			ValueId: valueId,
			KasId: kasId,
			Force: force,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
