// Code generated by adder. DO NOT EDIT.

package key_management_provider

import (
	
	"github.com/spf13/cobra"
)

// ProviderRequestFlags represents the flags for the provider command
type ProviderRequestFlags struct {
	Json string `json:"json"` // output single command in JSON (overrides configured output format)
}

// ProviderRequest represents the parameters for the provider command
type ProviderRequest struct {
	Flags ProviderRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// ProviderHandler defines the function type for handling provider commands
type ProviderHandler func(cmd *cobra.Command, req *ProviderRequest) error

// NewProviderCommand creates a new provider command with the provided handler function
func NewProviderCommand(handler ProviderHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "provider",
		Aliases: []string{"p"},
		Short:   "Provider configuration for Key Management",
		Hidden: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			return runProvider(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("json", "false", "output single command in JSON (overrides configured output format)")

	return cmd
}

// runProvider handles argument and flag extraction
func runProvider(cmd *cobra.Command, args []string, handler ProviderHandler) error {
	json, _ := cmd.Flags().GetString("json")

	// Create request
	req := &ProviderRequest{
		Flags: ProviderRequestFlags{
			Json: json,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
