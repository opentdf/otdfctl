// Code generated by adder. DO NOT EDIT.

package key_management_provider

import (
	
	"github.com/spf13/cobra"
)

// CreateRequestFlags represents the flags for the create command
type CreateRequestFlags struct {
	Name string `json:"name"` // Name of the provider config to create
	Config string `json:"config"` // JSON configuration for the provider
	Label string `json:"label"` // Metadata labels for the provider config
}

// CreateRequest represents the parameters for the create command
type CreateRequest struct {
	Flags CreateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// CreateHandler defines the function type for handling create commands
type CreateHandler func(cmd *cobra.Command, req *CreateRequest) error

// NewCreateCommand creates a new create command with the provided handler function
func NewCreateCommand(handler CreateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "create",
		Aliases: []string{"c"},
		Short:   "Create a Provider Config",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runCreate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().String("name", "", "Name of the provider config to create")
	cmd.MarkFlagRequired("name")
	cmd.Flags().StringP("config", "c", "", "JSON configuration for the provider")
	cmd.MarkFlagRequired("config")
	cmd.Flags().StringP("label", "l", "", "Metadata labels for the provider config")

	return cmd
}

// runCreate handles argument and flag extraction
func runCreate(cmd *cobra.Command, args []string, handler CreateHandler) error {
	name, _ := cmd.Flags().GetString("name")
	config, _ := cmd.Flags().GetString("config")
	label, _ := cmd.Flags().GetString("label")

	// Create request
	req := &CreateRequest{
		Flags: CreateRequestFlags{
			Name: name,
			Config: config,
			Label: label,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
