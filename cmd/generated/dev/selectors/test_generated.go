// Code generated by adder. DO NOT EDIT.

package dev_selectors

import (
	
	"github.com/spf13/cobra"
)

// TestRequestFlags represents the flags for the test command
type TestRequestFlags struct {
	Subject string `json:"subject"` // A Subject Context string (JSON or JWT, auto-detected)
	Selector string `json:"selector"` // Individual selectors to test against the Subject Context (i.e. '.key,.realm_access.roles[]')
}

// TestRequest represents the parameters for the test command
type TestRequest struct {
	Flags TestRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// TestHandler defines the function type for handling test commands
type TestHandler func(cmd *cobra.Command, req *TestRequest) error

// NewTestCommand creates a new test command with the provided handler function
func NewTestCommand(handler TestHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "test",
		Short:   "Test resolution of a set of selector expressions for keys and values of a Subject Context.",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runTest(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("subject", "s", "", "A Subject Context string (JSON or JWT, auto-detected)")
	cmd.Flags().StringP("selector", "x", "", "Individual selectors to test against the Subject Context (i.e. '.key,.realm_access.roles[]')")

	return cmd
}

// runTest handles argument and flag extraction
func runTest(cmd *cobra.Command, args []string, handler TestHandler) error {
	subject, _ := cmd.Flags().GetString("subject")
	selector, _ := cmd.Flags().GetString("selector")

	// Create request
	req := &TestRequest{
		Flags: TestRequestFlags{
			Subject: subject,
			Selector: selector,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
