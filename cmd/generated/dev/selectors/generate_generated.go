// Code generated by adder. DO NOT EDIT.

package dev_selectors

import (
	
	"github.com/spf13/cobra"
)

// GenerateRequestFlags represents the flags for the generate command
type GenerateRequestFlags struct {
	Subject string `json:"subject"` // A Subject Context string (JSON or JWT, default JSON)
}

// GenerateRequest represents the parameters for the generate command
type GenerateRequest struct {
	Flags GenerateRequestFlags `json:"flags"`
	RawArguments []string `json:"raw_arguments"` // Raw command line arguments passed to the command
}

// GenerateHandler defines the function type for handling generate commands
type GenerateHandler func(cmd *cobra.Command, req *GenerateRequest) error

// NewGenerateCommand creates a new generate command with the provided handler function
func NewGenerateCommand(handler GenerateHandler) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "generate",
		Aliases: []string{"gen"},
		Short:   "Generate a set of selector expressions for keys and values of a Subject Context",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runGenerate(cmd, args, handler)
		},
	}

	// Register persistent flags

	// Register flags
	cmd.Flags().StringP("subject", "s", "", "A Subject Context string (JSON or JWT, default JSON)")

	return cmd
}

// runGenerate handles argument and flag extraction
func runGenerate(cmd *cobra.Command, args []string, handler GenerateHandler) error {
	subject, _ := cmd.Flags().GetString("subject")

	// Create request
	req := &GenerateRequest{
		Flags: GenerateRequestFlags{
			Subject: subject,
		},
		RawArguments: args,
	}

	// Call handler
	return handler(cmd, req)
}
