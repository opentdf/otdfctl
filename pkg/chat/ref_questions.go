package chat

// GetPrompts returns a map of questions and their corresponding prompts for the chat utility.
func GetPrompts() map[string]string {
	return map[string]string{
		"Can you explain what otdfctl is, what it can do, and its relevance to the OpenTDF platform?":            "otdfctl is a command-line tool for interacting with the OpenTDF platform. It allows users to manage authentication, configure settings, encrypt and decrypt data, and enforce attribute-based access control (ABAC) policies. It is relevant to the OpenTDF platform as it provides a means to securely handle data and apply policies that ensure data protection and compliance.",
		"Can you explain how to define and apply an ABAC policy to a data object using otdfctl?":                 "To define and apply an ABAC policy using otdfctl you can use the policy command to manage attributes and resource mappings. First, create attributes using otdfctl policy attributes create. Then, map these attributes to resources using otdfctl policy resource-mappings create. Finally, encrypt the data with these attributes using otdfctl encrypt --attr.",
		"What are the key components of the ZTDF and how can I use otdfctl to utilize them?":                     "The key components of the Zero Trust Data Format (ZTDF) include encryption, attribute-based access control (ABAC), and secure key management. Using otdfctl, you can encrypt data (otdfctl encrypt), manage policies (otdfctl policy), and handle authentication (otdfctl auth). These commands help ensure data is securely encrypted and access is controlled based on defined attributes.",
		"How can I encrypt a file using otdfctl and ensure my attributes travel with the data?":                  "To encrypt a file and ensure attributes travel with the data, use the otdfctl encrypt command with the --attr flag to specify the attributes. For example:\notdfctl encrypt myfile.txt --attr \"https://example.com/attr/attr1/value/value1\"\nThis command encrypts myfile.txt and associates the specified attribute with the encrypted data.",
		"How do I enforce an attribute-based policy on a data object using otdfctl?":                             "To enforce an attribute-based policy, first create the necessary attributes and resource mappings using otdfctl policy attributes create and otdfctl policy resource-mappings create. Then, encrypt the data with these attributes using otdfctl encrypt --attr. The policy is enforced during decryption, ensuring only authorized users with matching attributes can access the data.",
		"What commands are available in otdfctl for managing an OpenTDF platform instance?":                      "Commands available for managing an OpenTDF platform instance include:\n- otdfctl auth for managing authentication sessions.\n- otdfctl config for managing configuration settings.\n- otdfctl policy for managing policies, attributes, and resource mappings.\n- otdfctl encrypt and otdfctl decrypt for encrypting and decrypting data.\n- otdfctl interactive for interactive mode.\n- otdfctl help for help on commands.",
		"How can otdfctl and OpenTDF be used together to ensure compliance with data protection regulations?":    "otdfctl and OpenTDF can ensure compliance with data protection regulations by encrypting data, applying ABAC policies, and securely managing keys. Use otdfctl encrypt to encrypt data, otdfctl policy to define and enforce access policies, and otdfctl auth to manage secure authentication. This ensures data is protected and access is controlled based on regulatory requirements.",
		"How can I use otdfctl to decrypt a file and verify that the applied ABAC policy is correctly enforced?": "To decrypt a file and verify the ABAC policy, use the otdfctl decrypt command. For example:\notdfctl decrypt myfile.txt.tdf\nIf the decryption is successful, it indicates that the ABAC policy was correctly enforced for you, provided you are an authorized user. To manage ABAC policies, you may need to use otdfctl policy.",
	}
}
